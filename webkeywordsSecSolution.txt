
public String getLocatorFromWebElement(WebElement element, WebDriver drivernew, TestCaseParam testCaseParam, PageDetails pageDetails) throws IOException {
	   
	    final int MAX_ELEMENT_STRING_LENGTH = 1000;
	    final int MAX_SPLIT_PARTS = 2;

	    String elementString = element.toString();
	    if (elementString == null || elementString.isEmpty()) {
	        logger.warn("Received null or empty WebElement string");
	        return "";
	    }

	    if (elementString.length() > MAX_ELEMENT_STRING_LENGTH) {
	        logger.warn("WebElement string exceeds maximum allowed length");
	        throw new IllegalArgumentException("WebElement string exceeds maximum allowed length");
	    }

	    String[] parts = elementString.split("->", MAX_SPLIT_PARTS);
	    if (parts.length < MAX_SPLIT_PARTS) {
	        logger.warn("WebElement string does not contain expected delimiter");
	        return "";
	    }

	    String locatorOutput = parts[1];
	    int lastBracketIndex = locatorOutput.lastIndexOf(']');
	    if (lastBracketIndex != -1) {
	        locatorOutput = locatorOutput.substring(0, lastBracketIndex);
	    }

	    String[] splitLocator = locatorOutput.split(": ", MAX_SPLIT_PARTS);
	    if (splitLocator.length < MAX_SPLIT_PARTS) {
	        logger.warn("Locator string does not contain expected delimiter");
	        return "";
	    }

	    splitLocator[0] = splitLocator[0].trim();
	    splitLocator[1] = splitLocator[1].trim();

	    if (splitLocator[0].isEmpty() || splitLocator[1].isEmpty()) {
	        logger.warn("Invalid locator parts");
	        return "";
	    }

	    return getElementText(drivernew, splitLocator[0], splitLocator[1], testCaseParam, pageDetails);
	}

	
	========================================
	
	
		public By getLocatorvalue(WebElement element) {
	    if (element == null) {
	        throw new IllegalArgumentException("WebElement cannot be null");
	    }

	    String elementString = element.toString();
	    if (elementString.isEmpty() || elementString.length() > 1000) {
	        throw new IllegalArgumentException("Invalid WebElement string");
	    }

	    int arrowIndex = elementString.indexOf("->");
	    int bracketIndex = elementString.lastIndexOf(']');
	    
	    if (arrowIndex == -1 || bracketIndex == -1 || arrowIndex >= bracketIndex) {
	        throw new IllegalArgumentException("Invalid WebElement string format");
	    }

	    String locatorString = elementString.substring(arrowIndex + 2, bracketIndex).trim();
	    int colonIndex = locatorString.indexOf(':');
	    
	    if (colonIndex == -1) {
	        throw new IllegalArgumentException("Invalid locator string format");
	    }

	    String locatorType = locatorString.substring(0, colonIndex).trim();
	    String locatorValue = locatorString.substring(colonIndex + 1).trim();

	    if (locatorType.isEmpty() || locatorValue.isEmpty()) {
	        throw new IllegalArgumentException("Invalid locator parts");
	    }

	    return getlocatorvalueforwait(locatorType, locatorValue);
	}
	
	==========================
		private static final Pattern PATTERN = Pattern.compile("(\\D{0,100})(\\d{1,10})");